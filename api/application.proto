syntax = "proto3";

package api;

// for grpc-gateway
import "google/api/annotations.proto";
import "common.proto";

// Application is the service managing applications.
service Application {
	// Create creates the given application.
	rpc Create(CreateApplicationRequest) returns (CreateApplicationResponse) {
		option(google.api.http) = {
			post: "/api/applications"
			body: "*"
		};
	}

	// Get returns the requested application.
	rpc Get(GetApplicationRequest) returns (GetApplicationResponse) {
		option(google.api.http) = {
			get: "/api/applications/{id}"
		};
	}

	// Update updates the given application.
	rpc Update(UpdateApplicationRequest) returns (UpdateApplicationResponse) {
		option(google.api.http) = {
			put: "/api/applications/{id}"
			body: "*"
		};
	}

	// Delete deletes the given application.
	rpc Delete(DeleteApplicationRequest) returns (DeleteApplicationResponse) {
		option(google.api.http) = {
			delete: "/api/applications/{id}"
		};
	}

	// List lists the available applications.
	rpc List(ListApplicationRequest) returns (ListApplicationResponse) {
		option(google.api.http) = {
			get: "/api/applications"
		};
	}
}

message CreateApplicationRequest {
	// Name of the application (must be unique).
	string name = 1;

	// Description of the application.
	string description = 2;

	// RX delay.
	uint32 rxDelay = 3;

	// RX1 data-rate offset.
	uint32 rx1DROffset = 4;

	// Channel-list ID used for CFlist (see LoRaWAN regional parameters if this applies to your region).
	int64 channelListID = 5;

	// RX window to use.
	RXWindow rxWindow = 6;

	// Data-rate to use for RX2.
	uint32 rx2DR = 7;

	// Relax frame-counter mode is enabled.
	bool relaxFCnt = 8;

	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	uint32 adrInterval = 9;

	// Installation-margin to use for ADR calculation.
	double installationMargin = 10;

	// Node is activated by ABP.
	bool isABP = 11;

	// Node operates in Class-C.
	bool isClassC = 12;
}

message CreateApplicationResponse {
	// ID of the application that was created.
	int64 id = 1;
}

message GetApplicationRequest {
	// Name of the application.
	int64 id = 1;
}

message GetApplicationResponse {
	// ID of the application.
	int64 id = 1;

	// Name of the application.
	string name = 2;

	// Description of the application.
	string description = 3;

	// RX delay.
	uint32 rxDelay = 4;

	// RX1 data-rate offset.
	uint32 rx1DROffset = 5;

	// Channel-list ID used for CFlist (see LoRaWAN regional parameters if this applies to your region).
	int64 channelListID = 6;

	// RX window to use.
	RXWindow rxWindow = 7;

	// Data-rate to use for RX2.
	uint32 rx2DR = 8;

	// Relax frame-counter mode is enabled.
	bool relaxFCnt = 9;

	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	uint32 adrInterval = 10;

	// Installation-margin to use for ADR calculation.
	double installationMargin = 11;

	// Node is activated by ABP.
	bool isABP = 12;

	// Node operates in Class-C.
	bool isClassC = 13;
}

message UpdateApplicationRequest {
	// ID of the application to update.
	int64 id = 1;

	// Name of the application (must be unique).
	string name = 2;

	// Description of the application.
	string description = 3;

	// RX delay.
	uint32 rxDelay = 4;

	// RX1 data-rate offset.
	uint32 rx1DROffset = 5;

	// Channel-list ID used for CFlist (see LoRaWAN regional parameters if this applies to your region).
	int64 channelListID = 6;

	// RX window to use.
	RXWindow rxWindow = 7;

	// Data-rate to use for RX2.
	uint32 rx2DR = 8;

	// Relax frame-counter mode is enabled.
	bool relaxFCnt = 9;

	// Interval (in frames) in which the ADR engine may adapt the data-rate of the node (0 = disabled).
	uint32 adrInterval = 10;

	// Installation-margin to use for ADR calculation.
	double installationMargin = 11;

	// Node is activated by ABP.
	bool isABP = 12;

	// Node operates in Class-C.
	bool isClassC = 13;
}

message UpdateApplicationResponse {}

message DeleteApplicationRequest {
	// ID of the application.
	int64 id = 1;
}

message DeleteApplicationResponse {}

message ListApplicationRequest {
	// Max number of applications to return in the result-test.
	int64 limit = 1;

	// Offset in the result-set (for pagination).
	int64 offset = 2;
}

message ListApplicationResponse {
	// Total number of applications available within the result-set.
	int64 totalCount = 1;
	
	// Applications within this result-set.
	repeated GetApplicationResponse result = 2;
}
